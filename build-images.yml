# The following variables need to be set in Azure Devops:

# Assets drive
# - (optional) assets.azure.fileshare.password
# - (optional) assets.shared.folder.server
# - assets.useDrive

# Image build options
# - build.includeExperimentalImages
# - build.includeJss
# - build.includeSh
# - build.includeSpe
# - build.includeSxa
# - build.includeShortTags
# - build.linuxImages
# - build.pruneImages
# - build.sitecoreTopology
# - build.sitecoreVersion
# - build.skipExistingImages

# Container registry
# - container.registry.fullname
# - container.registry.password
# - container.registry.username

# Linux
# - (optional) linux.install.source.path

# Sitecore credentials
# - sitecore.password
# - sitecore.username

# Windows:
# - windows.install.source.path

trigger:
  batch: true
  branches:
    include:
    - master

stages:
  - stage: Build_Windows_Images
    jobs:
      - job: Build_Windows_Images
        strategy:
          matrix:
            windows20H2:
              poolName: 'docker-20H2-agents'
              osVersion: '2009'
            windows2004:
              poolName: 'docker-2004-agents'
              osVersion: '2004'
            ltsc2019:
              poolName: 'docker-ltsc2019-agents'
              osVersion: 'ltsc2019'

        timeoutInMinutes: 720
        displayName: "Build Windows Images"
        pool:
          name: $(poolName)
        steps:
          - checkout: self
            clean: true
          - powershell: |
              Test-NetConnection -ComputerName "$(assets.shared.folder.server)" -Port 445
              Invoke-Expression -Command "cmdkey /add:$(assets.shared.folder.server) /user:Azure\dockerassets /pass:$(assets.azure.fileshare.password)"
              New-PSDrive -Name Z -PSProvider FileSystem -Root "\\$(assets.shared.folder.server)\docker-assets" -Persist -ErrorAction SilentlyContinue
            condition: eq(variables['assets.useDrive'], 'true')
            displayName: "Connect Asset Drive (optional)"

          - powershell: |
              az login -u "$(sitecore.container.registry.username)" -p "$(sitecore.container.registry.password)" -t "$(sitecore.container.registry.tenant)"
              if ("$(sitecore.container.registry)" -ne "scr.sitecore.com"){
                az acr login -n "$(sitecore.container.registry)"
              }
                az acr login -n "$(container.registry.fullname)"

              $topology = "$(build.sitecoreTopology)" -split ","
              $buildProps = @{
                InstallSourcePath = "$(windows.install.source.path)"
                Registry = "$(container.registry.fullname)"
                RegistryUserName = "$(container.registry.username)"
                RegistryPassword = "$(container.registry.password)"
                SitecoreVersion = "$(build.sitecoreVersion)"
                Topology = $topology
                OSVersion = "$(osVersion)"
                IncludeSpe = [System.Convert]::ToBoolean($(build.includeSpe))
                IncludeSxa = [System.Convert]::ToBoolean($(build.includeSxa))
                IncludeJss = [System.Convert]::ToBoolean($(build.includeJss))
                IncludeSh = [System.Convert]::ToBoolean($(build.includeSh))
                IncludeExperimental = [System.Convert]::ToBoolean($(build.includeExperimentalImages))
                SkipExistingImage = [System.Convert]::ToBoolean($(build.skipExistingImages))
                SitecoreRegistry = "$(sitecore.container.registry)"
                IncludeShortTags = [System.Convert]::ToBoolean($(build.includeShortTags))
              }

              .\Build.ps1 @buildProps
            displayName: "Build Images"
          - powershell: |
                docker image prune --force
            condition: and(succeeded(), eq(variables['build.pruneImages'], 'true'))
            displayName: 'Prune images (optional)'
  - stage: Build_Linux_Images
    dependsOn: []
    jobs:
      - job: Build_Linux_Images
        timeoutInMinutes: 720
        displayName: "Build Linux Images"
        condition: eq(variables['build.linuxImages'], 'true')
        pool:
          name: 'docker-linux-agents'
        steps:
          - checkout: self
            clean: true
          - task: Bash@3
            displayName: "Connect to asset drive"
            condition: eq(variables['assets.useDrive'], 'true')
            inputs:
                targetType: inline
                script: |
                  if [ -d "$(linux.install.source.path)" ]; then
                  exit 0
                  fi
                  sudo mkdir $(linux.install.source.path)

                  if [ ! -d "/etc/smbcredentials" ]; then
                  sudo mkdir /etc/smbcredentials
                  fi
                  if [ ! -f "/etc/smbcredentials/dockerassets.cred" ]; then
                      sudo bash -c 'echo "username=dockerassets" >> /etc/smbcredentials/dockerassets.cred'
                      sudo bash -c 'echo "password=$(assets.azure.fileshare.password)" >> /etc/smbcredentials/dockerassets.cred'
                  fi
                  sudo chmod 600 /etc/smbcredentials/dockerassets.cred

                  sudo bash -c 'echo "//$(assets.shared.folder.server)/docker-assets $(linux.install.source.path) cifs nofail,vers=3.0,credentials=/etc/smbcredentials/dockerassets.cred,dir_mode=0777,file_mode=0777,serverino" >> /etc/fstab'
                  sudo mount -t cifs //$(assets.shared.folder.server)/docker-assets $(linux.install.source.path) -o vers=3.0,credentials=/etc/smbcredentials/dockerassets.cred,dir_mode=0777,file_mode=0777,serverino
          - powershell: |
                sudo chmod 777 /mnt/dockerassets -R
                az login -u "$(sitecore.container.registry.username)" -p "$(sitecore.container.registry.password)" -t "$(sitecore.container.registry.tenant)"
                if ("$(sitecore.container.registry)" -ne "scr.sitecore.com"){
                  az acr login -n "$(sitecore.container.registry)"
                }
                az acr login -n "$(container.registry.fullname)"

                $topology = "$(build.sitecoreTopology)" -split ","
                $buildProps = @{
                  InstallSourcePath = "$(linux.install.source.path)"
                  Registry = "$(container.registry.fullname)"
                  RegistryUserName = "$(container.registry.username)"
                  RegistryPassword = "$(container.registry.password)"
                  SitecoreVersion = "$(build.sitecoreVersion)"
                  Topology = $topology
                  OSVersion = "linux"
                  IncludeSpe = [System.Convert]::ToBoolean($(build.includeSpe))
                  IncludeSxa = [System.Convert]::ToBoolean($(build.includeSxa))
                  IncludeJss = [System.Convert]::ToBoolean($(build.includeJss))
                  IncludeSh = [System.Convert]::ToBoolean($(build.includeSh))
                  IncludeExperimental = [System.Convert]::ToBoolean($(build.includeExperimentalImages))
                  SkipExistingImage = [System.Convert]::ToBoolean($(build.skipExistingImages))
                  SitecoreRegistry = "$(sitecore.container.registry)"
                  IncludeShortTags = [System.Convert]::ToBoolean($(build.includeShortTags))
                }

                .\Build.ps1 @buildProps
            displayName: "Build Linux Images"
          - powershell: |
                docker image prune --force
            condition: and(succeeded(), eq(variables['build.pruneImages'], 'true'))
  - stage: Trigger_Harbor_Push
    dependsOn:
    - Build_Windows_Images
    - Build_Linux_Images
    condition: and(succeeded('Build_Windows_Images'), succeeded('Build_Linux_Images'),eq(variables['Build.SourceBranch'], 'refs/heads/master'))
    jobs:
      - job: Harbor_Push
        displayName: 'Harbor Push'
        steps:
        - task: TriggerBuild@3
          displayName: "Trigger Community Modules"
          inputs:
            definitionIsInCurrentTeamProject: true
            buildDefinition: '103'
            queueBuildForUserThatTriggeredBuild: true
            ignoreSslCertificateErrors: false
            useSameSourceVersion: false
            useCustomSourceVersion: false
            useSameBranch: false
            branchToUse: 'main'
            waitForQueuedBuildsToFinish: false
            storeInEnvironmentVariable: false
            buildParameters: 'namespace: community, groupName: communityModules, tag:""'
            authenticationMethod: 'Personal Access Token'
            password: '$(System.AccessToken)'
            enableBuildInQueueCondition: false
            dependentOnSuccessfulBuildCondition: false
            dependentOnFailedBuildCondition: false
            checkbuildsoncurrentbranch: false
            failTaskIfConditionsAreNotFulfilled: false

        - task: TriggerBuild@3
          displayName: "Trigger Community Images"
          inputs:
            definitionIsInCurrentTeamProject: true
            buildDefinition: '103'
            queueBuildForUserThatTriggeredBuild: true
            ignoreSslCertificateErrors: false
            useSameSourceVersion: false
            useCustomSourceVersion: false
            useSameBranch: false
            branchToUse: 'main'
            waitForQueuedBuildsToFinish: false
            storeInEnvironmentVariable: false
            buildParameters: 'namespace: community, groupName: community, tag:""'
            authenticationMethod: 'Personal Access Token'
            password: '$(System.AccessToken)'
            enableBuildInQueueCondition: false
            dependentOnSuccessfulBuildCondition: false
            dependentOnFailedBuildCondition: false
            checkbuildsoncurrentbranch: false
            failTaskIfConditionsAreNotFulfilled: false