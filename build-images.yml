# The following variables need to be set in Azure Devops:

# Azure
# - azure.subscription
# - azure.agentPoolName
# - azure.vm.resourceGroupName
# - (optional) azure.vm.linux.name
# - azure.vm.windows.name
#
# Image build options
# - build.tags
# - build.pushMode
# - build.pruneImages
#
# Sitecore credentials
# - sitecore.username
# - sitecore.password
#
# Container registry
# - container.registry.password
# - container.registry.username
# - container.registry.fullname
#
# Windows:
# - windows.install.source.path
#
# Assets drive
# - assets.useDrive
# - (optional) assets.azure.fileshare.password
# - (optional) assets.shared.folder.server
#
# Linux
# - linux.buildImages
# - (optional) linux.install.source.path

trigger:
  batch: true
  branches:
    include:
    - master
schedules: 
  - cron: "0 12 * * 0"
    displayName: Weekly Sunday build
    branches:
      include:
      - master
    always: true

stages:
  - stage: Start_VMs
    jobs:
      - job: Start_Windows_VM
        pool:
          vmImage: Windows-2019 # Use Microsoft hosted image to start VMs
        steps:
          - task: vfabing.AzureVirtualMachineManagerTask.custom-build-release-task.AzureVirtualMachineManagerTask@1
            displayName: "Start Docker Build VM"
            inputs:
              Action: "Start VM"
              azureSubscription: $(azure.subscription)
              ResourceGroupName: $(azure.vm.resourceGroupName)
              VmName: $(azure.vm.windows.name)
      - job: Start_Linux_VM
        condition: eq(variables['linux.buildImages'], 'true')
        pool:
          vmImage: Windows-2019
        steps:
          - task: vfabing.AzureVirtualMachineManagerTask.custom-build-release-task.AzureVirtualMachineManagerTask@1
            displayName: "Start Docker Build VM"
            inputs:
              Action: "Start VM"
              azureSubscription: $(azure.subscription)
              ResourceGroupName: $(azure.vm.resourceGroupName)
              VmName: $(azure.vm.linux.name)

  - stage: Build_Images
    dependsOn: Start_VMs
    jobs:
      - job: Build_Windows_Images
        timeoutInMinutes: 720
        displayName: "Build Windows Images"
        pool:
          name: $(azure.agentPoolName)
        steps:
          - powershell: |
              Test-NetConnection -ComputerName "$(assets.shared.folder.server)" -Port 445
              Invoke-Expression -Command "cmdkey /add:$(assets.shared.folder.server) /user:Azure\dockerassets /pass:$(assets.azure.fileshare.password)"
              New-PSDrive -Name Z -PSProvider FileSystem -Root "\\$(assets.shared.folder.server)\docker-assets" -Persist -ErrorAction SilentlyContinue
            condition: eq(variables['assets.useDrive'], 'true')
            displayName: "Connect Asset Drive (optional)"
          - task: Docker@2
            displayName: "Docker registry login"
            inputs:
              containerRegistry: "docker-registry"
              command: login
          - checkout: self
            clean: all
          - powershell: |
              "$(container.registry.password)" | docker login -u "$(container.registry.username)" --password-stdin $(container.registry.fullname)
              Import-Module (Join-Path "$(Build.SourcesDirectory)" "\modules\SitecoreImageBuilder") -Force
              SitecoreImageBuilder\Invoke-PackageRestore -Tags "$(build.tags)" -Path (Join-Path "$(Build.SourcesDirectory)" "windows") -Destination $(windows.install.source.path) -SitecoreUsername "$(sitecore.username)" -SitecorePassword "$(sitecore.password)"
              SitecoreImageBuilder\Invoke-Build -Tags "$(build.tags)" -Path (Join-Path "$(Build.SourcesDirectory)" "windows") -InstallSourcePath $(windows.install.source.path) -Registry $(container.registry.fullname) -PushMode $(build.pushMode)
            displayName: "Build Images"
          - powershell: |
                docker image prune --force
            condition: and(succeeded(), eq(variables['build.pruneImages'], 'true'))
            displayName: 'Prune images (optional)'

      - job: Build_Linux_Images
        timeoutInMinutes: 720
        displayName: "Build Linux Images"
        condition: eq(variables['linux.buildImages'], 'true')
        pool:
          name: $(azure.agentPoolName)
          demands:
            - Agent.OS -equals Linux
        steps:
          - task: Bash@3
            condition: eq(variables['assets.useDrive'], 'true')
            inputs:
                targetType: inline
                script: |
                  if [ -d "$(linux.install.source.path)" ]; then
                  exit 0
                  fi
                  sudo mkdir $(linux.install.source.path)
                  
                  if [ ! -d "/etc/smbcredentials" ]; then
                  sudo mkdir /etc/smbcredentials
                  fi
                  if [ ! -f "/etc/smbcredentials/dockerassets.cred" ]; then
                      sudo bash -c 'echo "username=dockerassets" >> /etc/smbcredentials/dockerassets.cred'
                      sudo bash -c 'echo "password=$(assets.azure.fileshare.password)" >> /etc/smbcredentials/dockerassets.cred'
                  fi
                  sudo chmod 600 /etc/smbcredentials/dockerassets.cred

                  sudo bash -c 'echo "//$(assets.shared.folder.server)/docker-assets $(linux.install.source.path) cifs nofail,vers=3.0,credentials=/etc/smbcredentials/dockerassets.cred,dir_mode=0777,file_mode=0777,serverino" >> /etc/fstab'
                  sudo mount -t cifs //$(assets.shared.folder.server)/docker-assets $(linux.install.source.path) -o vers=3.0,credentials=/etc/smbcredentials/dockerassets.cred,dir_mode=0777,file_mode=0777,serverino
          - task: Docker@2
            enabled: true
            displayName: "Docker registry login"
            inputs:
                containerRegistry: "docker-registry"
                command: login
          - checkout: self
            clean: all
          - powershell: |
                "$(container.registry.password)" | docker login -u "$(container.registry.username)" --password-stdin $(container.registry.fullname)
                Import-Module (Join-Path "$(Build.SourcesDirectory)" "\modules\SitecoreImageBuilder") -Force
                SitecoreImageBuilder\Invoke-PackageRestore -Tags "$(build.tags)" -Path (Join-Path "$(Build.SourcesDirectory)" "linux") -Destination "$(linux.install.source.path)" -SitecoreUsername "$(sitecore.username)" -SitecorePassword "$(sitecore.password)"
                SitecoreImageBuilder\Invoke-Build -Tags "$(build.tags)" -Path (Join-Path "$(Build.SourcesDirectory)" "linux") -InstallSourcePath "$(linux.install.source.path)" -Registry $(container.registry.fullname) -PushMode $(build.pushMode)
          - powershell: |
                docker image prune --force
            condition: and(succeeded(), eq(variables['build.pruneImages'], 'true'))
